#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Layer Definitions
#define QWERTY 0
#define NAV 1
#define MEDIA 2
#define NUM 3
#define SYM 4
#define FUN 5

// Desktop and tab navigation shortcuts
#define D_LT   LC(LG(LEFT))
#define D_RT   LC(LG(RIGHT))
#define TAB_RT LC(TAB)
#define TAB_LT LC(LS(TAB))

#include "combos.dtsi"

// Behavior configuration
&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// Keymap configuration
/ {
    behaviors {
        am: alpha_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_MT";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        as: alpha_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "ALPHA_SFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Easy alt-tab with alt+backspace thumb using mod-morphs
        bstab: backspace_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_TAB";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp TAB>;
            mods = <MOD_LALT>;
        };
        lt_bspc: layer_tap_backspace_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            bindings = <&mo>, <&bstab>;
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define FUN layer as tri-state
        func_tristate {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    macros {
        ZMK_MACRO(inv_qm,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>
                , <&macro_release &kp LALT>;
        )
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&trans      &kp Q       &kp W       &kp E          &kp R          &kp T                &kp Y          &kp U         &kp I          &kp O         &kp P          &trans
&trans      &kp A       &kp S       &kp D          &kp F          &kp G                &kp H          &kp J         &kp K          &kp L         &kp SEMI       &trans
&trans      &kp Z       &kp X       &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA       &kp DOT       &kp FSLH       &trans
                                &mt LGUI ESC  &mt RSHFT RET  &lt SYM SPACE    &lt_bspc NAV 0 &mt LCTRL TAB &mt RALT DEL
            >;
        };

        navigation {
            bindings = <
&trans  &kp LA(F4)    &kp TAB_LT    &kp TAB_RT    &kp LC(F4)    &kp C_VOL_UP       &kp HOME      &kp PG_DN     &kp PG_UP     &kp END       &none         &trans
&trans  &kp LCTRL     &kp LGUI      &kp LALT      &am LSHFT TAB &kp C_VOL_DN       &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp C_AL_CALC &trans
&trans  &none         &none         &none         &kp LS(INS)   &kp C_PP           &kp INS       &kp DEL       &kp C_PREV    &kp C_NEXT    &none         &trans
                        &kp LGUI      &kp LSHFT     &trans        &trans        &kp LCTRL     &kp RALT
            >;
        };

        media {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &bootloader   &ext_power EP_OFF  &cp C_BRI_DN  &cp C_BRI_UP  &ext_power EP_ON  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &reset        &cp C_PREV         &cp C_VOL_DN  &cp C_VOL_UP  &cp C_NEXT        &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &out OUT_BLE  &bt BT_SEL 0       &bt BT_PRV    &bt BT_NXT    &bt BT_CLR        &trans
                            &trans     &trans     &trans        &cp C_STOP    &cp C_PLAY         &cp C_MUTE
            >;
        };

        numbers {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT         &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL        &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH         &trans  &trans     &trans     &kp RALT  &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS        &trans  &trans     &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT     &kp BSLH      &kp N7        &kp N8        &kp N9        &kp COMMA    &trans
&trans  &kp PLUS      &kp EQUAL     &kp UNDER     &kp MINUS     &kp CARET     &kp N0        &kp N4        &kp N5        &kp N6        &kp DOT      &trans
&trans  &none         &none         &inv_qm       &kp STAR      &kp AMPS      &kp SEMI      &kp N1        &kp N2        &kp N3        &kp SLASH    &trans
                             &kp LGUI      &kp SPACE     &trans            &trans        &kp LSHFT     &kp RALT
            >;
        };

        function {
            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5               &kp CAPS      &none         &none         &none          &none        &trans
&trans  &kp F6        &kp F7        &kp F8        &kp F9        &kp F10              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4 &trans
&trans  &none         &kp D_LT      &kp D_RT      &kp F11       &kp F12              &out OUT_USB  &out OUT_BLE  &kp PSCRN     &kp PAUSE_BREAK &bt BT_CLR  &trans
                         &bootloader   &reset        &trans            &trans        &reset        &bootloader
            >;
        };
    };
};
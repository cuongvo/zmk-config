#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200

// Layer Definitions
#define QWERTY 0
#define NAV 1
#define SYM 2
#define NUM 3
#define FUN 4

// Behavior configuration
&sk {
    release-after-ms = <1000>;
    quick-release;
};

&sl {
    release-after-ms = <1000>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;    
};

// Keymap configuration
/ {
    behaviors {
        shftcw: shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
    };

/*                KEY POSITIONS
  ╭──────────────────────╮ ╭───────────────────────╮
  │  0   1   2   3   4  5│ │  6  7   8   9   10  11│
  │ 12  13  14  15  16 17│ │ 18  19  20  21  22  23│
  │ 24  25  26  27  28 29│ │ 30  31  32  33  34  35│
  ╰─────────╮   36  37 38│ │ 39  40  41╭───────────╯
            ╰────────────╯ ╰───────────╯            */

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3 4>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp TAB>;
            layers = <0 1 2 3 4>;
        };

        combo_ret {
            timeout-ms = <30>;
            key-positions = <18 19>;
            bindings = <&kp RET>;
            layers = <0 1 2 3 4>;
        };
        
        // layer combos
        combo_fun {
            timeout-ms = <50>;
            key-positions = <36 41>;
            bindings = <&mo FUN>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        qwerty {
            bindings = <
&none   &kp Q       &kp W       &kp E          &kp R          &kp T                      &kp Y          &kp U         &kp I          &kp O         &kp P         &none 
&none   &kp A       &kp S       &kp D          &kp F          &kp G                      &kp H          &kp J         &kp K          &kp L         &kp SEMI      &none
&none   &kp Z       &kp X       &kp C          &kp V          &kp B                      &kp N          &kp M         &kp CMMA       &kp DOT       &lt FUN FSLH  &none
                                &mo NAV        &shftcw        &kp SPACE                  &kp BSPC       &mo SYM       &mo NUM
            >;
        };

        navigation {
            bindings = <
&trans  &kp HOME    &kp PG_DN    &kp PG_UP     &kp END       &kp C_VOL_UP                &kp ESC       &kp TAB       &kp ENTER     &kp ESC       &kp DEL         &trans
&trans  &sk LGUI    &sk LALT     &sk LCTRL     &sk LSHFT     &kp C_VOL_DN                &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &none           &trans
&trans  &kp INS     &kp DEL      &none         &none         &none                       &kp K_PREV    &kp K_PP      &kp K_NEXT    &none         &none           &trans
                                 &trans        &trans        &trans                      &trans        &trans        &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp EXCL    &kp AT        &kp LBRC      &kp RBRC      &kp HASH                   &none         &kp GRAVE     &kp TILDE     &kp DQT       &kp SQT         &trans
&trans  &kp DLLR    &kp PRCNT     &kp LPAR      &kp RPAR      &kp EQUAL                  &none         &sk LSHFT     &sk LCTRL      &sk LALT      &sk LGUI       &trans
&trans  &kp AMPS    &kp ASTRK     &kp LBKT      &kp RBKT      &kp CARET                  &none         &none         &none         &kp UNDER      &kp MINUS           &trans
                             &trans      &trans  &trans                                  &trans        &trans        &trans
            >;
        };

        numbers {
            bindings = <
&trans  &kp KP_MINUS  &kp N7        &kp N8      &kp N9        &kp PLUS                   &none         &none         &none         &none          &none          &trans
&trans  &kp N0        &kp N4        &kp N5      &kp N6        &kp EQUAL                  &none         &sk LSHFT     &sk LCTRL      &sk LALT       &sk LGUI      &trans
&trans  &kp PIPE2     &kp N1        &kp N2      &kp N3        &kp BSLH                   &none         &none         &none         &none          &none          &trans
                             &trans      &trans  &trans                                  &trans        &trans        &trans
            >;
        };

        function {
            bindings = <
&trans  &kp F12        &kp F7        &kp F8        &kp F9     &none                      &caps_word    &none         &none         &none          &none        &trans
&trans  &kp F11        &kp F4        &kp F5        &kp F6     &none                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4 &trans
&trans  &kp F10        &kp F1        &kp F2        &kp F3     &none                      &bt BT_CLR    &none         &none         &none          &none        &trans
                       &bootloader   &trans        &trans                                &bootloader   &trans        &trans
            >;
        };
    };
};
